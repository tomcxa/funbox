{"version":3,"sources":["components/NavbarItem.jsx","components/Navbar.jsx","components/Header.jsx","pages/LevelOne.jsx","components/CatEatItemList.jsx","components/CatEatItemWrapper.jsx","data/index.js","components/CatEatContainer.jsx","components/ContainerWrapper.jsx","pages/LevelTwo.jsx","App.js","serviceWorker.js","index.js"],"names":["NavbarItem","item","pathname","useLocation","history","useHistory","className","anchor","onClick","push","to","title","Navbar","map","index","key","Header","LevelOne","href","CatEatCardList","children","CatEatItemWrapper","card","useState","selected","setSelected","toogleSelected","inStoke","prev","description","whitWhat","promotion","promo","i","weight","selectedText","event","preventDefault","catEatData","CatEatContainer","CatEatItemList","nanoid","ContainerWrapper","LevelTwo","App","basename","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.97446654.chunk.js","sourcesContent":["import React from 'react'\nimport { Link, useLocation, useHistory } from 'react-router-dom'\n\nconst NavbarItem = ({ item }) => {\n    const { pathname } = useLocation()\n    const history = useHistory()\n\n    return (\n        <li className={\n            `navbar-item\n            ${pathname === item.anchor\n            ? 'active'\n            : null}`\n        }\n            onClick={() => history.push(item.anchor)}\n        >\n            <Link\n                className=\"navbar-link unstyled-link\"\n                to={item.anchor}\n            >\n                {item.title}\n            </Link>\n        </li>\n    )\n}\n\nexport default NavbarItem\n","import React from 'react'\nimport NavbarItem from './NavbarItem'\n\nconst Navbar = () => {\n    const navItems = [\n        {anchor: '/', title: 'Level 1'},\n        {anchor: '/level2', title: 'Level 2'}\n    ]\n\n    return (\n        <nav className=\"navbar\">\n            <ul className=\"navbar-list\">\n                {\n                    navItems.map((item, index) => <NavbarItem key={index} item={item} />)\n                }\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navbar\n","import React from 'react'\nimport Navbar from './Navbar'\n\nconst Header = () => {\n    return (\n        <header className=\"header\">\n            <h1 className=\"header-logo\">Тестовое задание FunBox</h1>\n            <Navbar />\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\n\nconst LevelOne = () => {\n    return (\n        <div className=\"level-one-container\">\n            <a\n                className=\"level-one-link unstyled-link\"\n                href='https://github.com/tomcxa/funbox/blob/master/README.md'\n            >\n                Нажмите чтобы открыть ответы на вопросы Level 1\n            </a>\n        </div>\n    )\n}\n\nexport default LevelOne\n","import React from 'react'\nimport '../styles/CatEatItemListStyle.scss'\n\nconst CatEatCardList = ({ children }) => {\n    return (\n        <div className=\"cat-eat-cards\">\n            {children}\n        </div>\n    )\n}\n\nexport default CatEatCardList\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useState } from 'react'\nimport '../styles/CatEatItemStyle.scss'\n\nconst CatEatItemWrapper = ({ card }) => {\n    const [selected, setSelected] = useState(false)\n\n    const toogleSelected = () => {\n        if (card.inStoke) setSelected(prev => !prev)\n    }\n\n    const linkClickHandler = (event) => {\n        event.preventDefault()\n        toogleSelected()\n    }\n\n    return (\n        <div className=\"cat-eat-wrapper\">\n            <div\n                onClick={toogleSelected}\n                className={`cat-eat-card ${card.inStoke ? '' : 'disabled'} ${selected ? 'selected' : ''}`}\n            >\n                <div className=\"cat-eat-card__card-header\">\n                    <span className=\"cat-eat-card__card-header__description\">{card.description}</span>\n                </div>\n                <div className=\"cat-eat-card__card-body\">\n                    <h2 className=\"cat-eat-card__card-body__title\">{card.title}</h2>\n                    <span className=\"cat-eat-card__card-body__with\">{card.whitWhat}</span>\n                    <div className=\"cat-eat-card__card-body__promo\">\n                        {card.promotion.map((promo, i) => <div key={i}>{promo}</div>)}\n                    </div>\n                </div>\n                <div className=\"cat-eat-card__weight\">{card.weight}<br /><div className=\"unit\">кг</div></div>\n            </div>\n            <div className=\"cat-eat-footer\">\n                {\n                    (selected\n                        && <span>{card.selectedText}</span>)\n                    || (!card.inStoke\n                        && <span>Печалька, {card.whitWhat} закончился</span>)\n                    || <span>Чего сидишь? Порадуй котэ, <a onClick={linkClickHandler} className='cat-eat-footer__link' href='#'>купи</a>.</span>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default CatEatItemWrapper\n","export const catEatData = [\n    {\n        description: 'Сказочное заморское явство',\n        title: 'Нямушка',\n        whitWhat: 'с фуа-гра',\n        promotion: ['10 порций', 'мышь в подарок'],\n        weight: '0,5',\n        selectedText: 'Печень утки разварная с артишоками.',\n        inStoke: true,\n    },\n    {\n        description: 'Сказочное заморское явство',\n        title: 'Нямушка',\n        whitWhat: 'с рыбой',\n        promotion: ['40 порций', '2 мыши в подарок'],\n        weight: '2',\n        selectedText: 'Головы щучьи с чесноком да свежайшая сёмгушка.',\n        inStoke: true,\n    },\n    {\n        description: 'Сказочное заморское явство',\n        title: 'Нямушка',\n        whitWhat: 'с курой',\n        promotion: ['100 порций', '5 мышей в подарок', 'заказчик доволен'],\n        weight: '5',\n        selectedText: 'Филе из цыплят с трюфелями в бульоне.',\n        inStoke: false,\n    }\n];","import React from 'react'\nimport { nanoid } from 'nanoid'\nimport CatEatItemList from './CatEatItemList'\nimport CatEatItemWrapper from './CatEatItemWrapper'\nimport '../styles/CatEatContainerStyle.scss'\nimport { catEatData } from '../data'\n\nconst CatEatContainer = () => {\n\n\n    return (\n        <div className=\"cat-eat-container\">\n            <h2 className=\"cat-eat-title\">Ты сегодня покормил кота?</h2>\n            <CatEatItemList>\n                {catEatData.map((card) => (<CatEatItemWrapper key={nanoid()} card={card} />))}\n            </CatEatItemList>\n        </div>\n    )\n}\n\nexport default CatEatContainer\n","import React from 'react'\nimport '../styles/ContainerWrapperStyle.scss'\n\nconst ContainerWrapper = ({children}) => {\n    return (\n        <div className=\"container-wrapper\">\n            {children}\n        </div>\n    )\n}\n\nexport default ContainerWrapper\n","import React from 'react'\nimport CatEatContainer from '../components/CatEatContainer'\nimport ContainerWrapper from '../components/ContainerWrapper'\n\nconst LevelTwo = () => {\n    return (\n        <ContainerWrapper>\n            <CatEatContainer />\n        </ContainerWrapper>\n        \n    )\n}\n\nexport default LevelTwo\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Header from './components/Header';\nimport LevelOne from './pages/LevelOne';\nimport LevelTwo from './pages/LevelTwo';\n\nfunction App() {\n  return (\n    <Router basename=\"/funbox\" >\n      <Header />\n      <Switch>\n      <Route path=\"/level2\" >\n          <LevelTwo />\n        </Route>\n        <Route path=\"/\" >\n          <LevelOne />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}